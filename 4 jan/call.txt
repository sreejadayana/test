Call by value: 

In Call By Value, the copy of the variable's value is passed and call by value 
is applicable to primitive types ( number, boolean, string). 

                     var a=100; 

                       function f1(y){
                          console.log(y);  // 100
                          y=900;
                       }

                       f1(a); //  f1(100) - call by value -  primitive types
                       console.log(a); // 100 

Call By Reference: 


In call by refernce, the address of the variable is passed as an argument. 

call by reference is applicable to non primitive types ( arrays , objects).

<html>
    <head>

    </head>

      <body>

         <script>

                         var arr= [100,20,30,40,50];  // 101x

                        // console.log(arr.length); // 5

                         function x1(m){
                              m.push(60);
                              m.push(70);
                              m.push(80);
                              console.log(m.length); // 8 // calling the function and array to it
                         }

                         x1(arr); // x1(101x)-> call  by reference(address)
                         console.log(arr.length); // 8
         </script>

      </body>
</html>


Problem Statement: 

Implement call by reference on objects. 


var Employee = {
 empid: "101",
empname: "bhavaniprasad",
 };
console.log(Employee);
function chnageemployee(Emp) {
Emp.empname = "sannmauri bhavaniprasad";
console.log(Emp);
 }
chnageemployee(Employee);
console.log(Employee); 


IIFE: Immediately Invoked Function Expression 


  var x =  (function(){
                        // code
                        console.log("IIFE Called");
                        return 100;
                     })();


                     console.log(x);

                      (function(){
                        console.log("IIFE 2 Called");
                      })();

Closures: 

A closure is a scope that gets formed when a nested function is created. 

using closures, we can create private functions. 


<html>
    <head>

    </head>

      <body>

         <script>


                    function outer(){  // closure scope (a,b)
                         var a=100, b=200;
                                   function inner1(){ 
                                       console.log("inner1");
                                       console.log(a); // ?
                                       console.log(b); // ?
                                   }

                                   function inner2(){
                                          console.log("inner 2");
                                   }

                                   inner1();
                                   inner2();

                    }

                    outer();

         </script>

      </body>
</html>



 


